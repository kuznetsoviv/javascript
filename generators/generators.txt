Генераторы:
	генераторы могут возвращать множество значений, одно за другим, в отличии от обычных функций:
	Когда функция вызывается, она не выполняет свой код, вместо этого она возвращает специальный объект,
	(генератор)	для управления ее выполнением.
	Основным методом генератора является метод next.
	Результатом метода next является объект с двумя свойствами:
		value: значение из yield
		done: true / false
	Пример:
		function* generateSequence() {
  			yield 1;
  			yield 2;
  			return 3;
		}
		let three = generator.next();
		alert(JSON.stringify(three)); 	
	-----------------------------------------------------------------------
	Генератор является перебираемым объектом (то есть содержит в себе метод с наимменованием:
		[Symbol.iterator]), поэтому может использоваться в цике for	... of
		Пример:	
		for(let value of generator) {
  			alert(value); // 1, затем 2, затем 3
		}
		Пример использования генератора для создания итерируемого объекта:
			let range = {
			  from: 1,
			  to: 5,
			  *[Symbol.iterator]() { // краткая запись для [Symbol.iterator]: function*()
			    for(let value = this.from; value <= this.to; value++) {
			      yield value;
			    }
			  }
			};

			alert( [...range] );
	-----------------------------------------------------------------------
	Композиция генераторов (для этого используется особый синтаксис с yield*):
		function* generateSequence(start, end) {
  			for (let i = start; i <= end; i++) yield i;
		}	

		function* generatePasswordCodes() {
  			yield* generateSequence(48, 57);
  			yield* generateSequence(65, 90);
  			yield* generateSequence(97, 122);	
		}	
		yield* делегирует выполнение другому генератору
	-----------------------------------------------------------------------
	С помощью yield можно передавать значение извне в генератор.
		function* gen() {
		  let result = yield "2 + 2 = ?"; 
		  alert(result);
		}

		let generator = gen();
		let question = generator.next().value;
		generator.next(4);
	Также кроме значение, но и иницировать ошибку:
		generator.throw(err);
		если ошибку не перехватывать, то она выволится во внешнее окружение
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Асинхронные генераторы:
	Асинхронные итераторы - позволяют перебирать данные, поступающие асинхронно.		