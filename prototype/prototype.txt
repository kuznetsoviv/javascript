Прототипное наследование:
--------------------------------------------------------------------------
	В js объекты имеют специальное скрытое своство [[Prototype]]:
	(либо равно null либо ссылается на другой объект)
	Когда нужно прочитать свойство, а оно отсутствует, то js берет его из прототипа
	Пример:
		let animal = {
  			eats: true,
  			walk() {
  				/**/
  			}
		};
		let rabbit = {
  			jumps: true,
  			__proto__: animal // устаревший вариант (Object.setPrototypeOf)
		};	
	Операция записи работает напрямую с собственным объектом.	
		rabbit.walk = function() {alert("Rabbit!");}; - добавляется новый метод в rabbit
	При вызове метода this - всегда объект перед точкой.
	Цикл for...in проходит не только по собственным, но и по унаследованным свойствам объекта.
	Если наследуемые свойства не нужны, то мы можем отфильтровать данные с помощю метода:
	obj.hasOwnProperty(key).
	Почти все остальные методы получения ключей, значений игнорируют унаследованные свойства:
	Object.keys, Object.values
--------------------------------------------------------------------------
	Если в объекте функции F.prototype содержиться объект, то оператор new устанавливает 
	его в качестве прототипа.
		let animal = {
			eats: true
		}
		function Rabbit(name) {
			this.name = name
		}
		Rabbit.prototype = animal;
		let rabbit = new Rabbit('rabbit');
		alert(rabbit.eats);
	F.prototype используется при создании объекта, после его создания это свойство и 
	объект ничего не связывает.
	--------------------------------------------------------------------------
	По умолчанию у каждой функции есть свойство prototype по умолчанию - 
	объект с единственным свойством constructor.
		function Rabbit() {}
		alert( Rabbit.prototype.constructor == Rabbit ); // true
	Поэтому чтобы не перетирать это свойство нужно добавлять, удалять, изменять свойства у прототипа, 
	вместо того, чтобы перезаписывать его целиком.
		Rabbit.prototype.jumps = true;
	delete rabbit.eats // этот ператор пытается удалить свойство только у кролика
	--------------------------------------------------------------------------
	Object.prototype - содержит список методов по-умолчанию для каждого создаваемого объекта.
	У него свойство __proto__ - содержит null.
	Иерархия прототипов:
		let arr = [1, 2, 3];
		// наследует ли от Array.prototype?
		alert( arr.__proto__ === Array.prototype ); // true
		// затем наследует ли от Object.prototype?
		alert( arr.__proto__.__proto__ === Object.prototype ); // true
		// и null на вершине иерархии
		alert( arr.__proto__.__proto__.__proto__ ); 
	Встроенные прототипы можно изменять (используется при создании полифилов):
		String.prototype.show = function() {
  			alert(this);
		};
		"BOOM!".show();	
		--------------------------------------------------------------------------
		Function.prototype.defer = function(ms) {
  			setTimeout(this, ms);	
		};
		function f() {
  			alert("Hello!");
		}		
		f.deref(1000);
		--------------------------------------------------------------------------
		Современный способ создания объекта с прототипом:
			Object.create(proto, [descriptors]) 
			let animal = {
  				eats: true
			};
			let rabbit = Object.create(animal);
		После создания объекта лучше не менять его прототип - это очень медленная операция.
		Более корректное копирование объекта:
		let clone = Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));
		Object.create(null) - создание объекта без прототипа
--------------------------------------------------------------------------
--------------------------------------------------------------------------		
Пример создания цепочки прототипов с помощью функций:
	function Parent(name) {
	    this.name = name;
	}
	Parent.prototype.getName = function() {
	    return this.name;
	};
	function Child(name) {
	    Parent.call(this, name);
	    this.age = 0;
	}
	Child.prototype = Object.create(Parent.prototype); // (1)
	Child.prototype.constructor = Child;
	Child.prototype.getAge = function() {
	    return this.age;
	};
	var c = new Child();
