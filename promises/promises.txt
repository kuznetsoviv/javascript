-----------------------------------------------------------------------
-----------------------------------------------------------------------
Колбеки:
	Функции, которые в качестве параметров содержат функции:
		function loadScript(src, callback) {
		  let script = document.createElement('script');
		  script.src = src;

		  script.onload = () => callback(null, script);
		  script.onerror = () => callback(new Error(`Не удалось загрузить скрипт ${src}`));

		  document.head.append(script);
		}
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Промисы:		
	let promise = new Promise(function(resolve, reject) {
	  setTimeout(() => resolve("done"), 1000);
	});
	В промисе можно вызвать только один раз resolve или reject, все остальный вызовы будут проигнорированы.
	reject Обычно вызывается с объектом Error.
	Методы then, catch, finally:
		then - принимает два колбека, первый выполняется, когда функция выполнена успешно, второй, когда нет
		catch - для обработки ошибки
		finally - выполняется в любом случае, пропускает результат или ошибку дальше
	Пример:
		function delay(ms) {
  			return new Promise((resolve, reject) => {
  				setTimeout(resolve, 3000);
  			});
		}
		delay(3000).then(() => alert('выполнилось через 3 секунды'));
	-----------------------------------------------------------------------	
	Цепочка промисов:
		new Promise(function(resolve, reject) {
  			setTimeout(() => resolve(1), 1000); // (*)
		}).then(function(result) { // (**)
  			alert(result); // 1
  			return result * 2;
		}).then(function(result) { // (***)
  			alert(result); // 2
  			return result * 2;
		}).then(function(result) {
  			alert(result); // 4
  			return result * 2;
		});
	-----------------------------------------------------------------------
	thenable - промисообразный	
		Обработчик может возвращать не именно промис, а любой объект содержащий метод then
			class Thenable {
			  	constructor(num) {
			    this.num = num;
			  }
			  then(resolve, reject) {
			    setTimeout(() => resolve(this.num * 2), 1000); // (**)
			  }
			}

			new Promise(resolve => resolve(1))
			  .then(result => {
			  	// будет вызван метод then объекта Thenable
			    return new Thenable(result); // (*)
			  })
			  .then(alert);
	-----------------------------------------------------------------------
	Обработка ошибок в проимсах:
		В случае ошибки в цепочке промисов управление переходит в ближайший catch:
			fetch('https://no-such-server.blabla') // ошибка в url
  				.then(response => response.json())
  				.catch(err => alert(err))
  		вокруг функции промиса находится неявный catch, если происходит исключение, 
  		то оно перехватывается и промис считается отклоненным с этой ошибкой.
  			new Promise((resolve, reject) => {
  				throw new Error("Ошибка!");
			}).catch(alert);		
		неявный catch работает и в функции промиса.
		-----------------------------------------------------------------------
		Блок catch может завершиться ошибкой, тогда управление переходит в следующий catch в цепочке,
		если блок catch завершился успешно, то вызывается следующий обработчик then
		-----------------------------------------------------------------------
		Если появилась ошибка и нет блока catch, то будет сгенерирована глобальная ошибка:
		unhandledrejection (window.addEventListener('unhandledrejection', function...)
	-----------------------------------------------------------------------
	Promise API	
		-----------------------------------------------------------------------
		Promise.all - принимает массив промисов и возвращает новый промис, 
		который завершится, когда завершится весь переданный массив 
		(результат будет получен в виде маасива результатов выполненных Promise)
		Если какой-то promise завершиться ошибкой, то результат возвратиться с ошибкой.
		В Promise.all можно передавать и обычный значения:
			Promise.all([
  				new Promise((resolve, reject) => {
    				setTimeout(() => resolve(1), 1000)
  				}),
  				2,
  				3
			]).then(alert);
		-----------------------------------------------------------------------	
		Promise.allSettled - ждет всех результатов в любом случае, 
		элементы массива с результатами:
			{status:"fulfilled", value:результат} для успешных завершений,
			{status:"rejected", reason:ошибка} для ошибок.
		Пример:
			let urls = [
			  'https://api.github.com/users/iliakan',
			  'https://api.github.com/users/remy',
			  'https://no-such-url'
			];

			Promise.allSettled(urls.map(url => fetch(url)))
			  .then(results => { // (*)
			    results.forEach((result, num) => {
			      if (result.status == "fulfilled") {
			        alert(`${urls[num]}: ${result.value.status}`);
			      }
			      if (result.status == "rejected") {
			        alert(`${urls[num]}: ${result.reason}`);
			      }
			    });
			  });
		-----------------------------------------------------------------------		  
		Promise.race -  ждет выполнение только первого promise
		-----------------------------------------------------------------------
		Promise.resolve/reject - создают promise с успешно/неуспешно выполненным результатом
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Промисфикация:
	берем функцию, которая принимает колбек и делаем так, чтобы она возвращала Promise.
	Пример функции, которая выполняет промисфикацию:
		function promisify(f, manyArgs = false) {
		  return function (...args) {
		    return new Promise((resolve, reject) => {
		      function callback(err, ...results) { // наш специальный колбэк для f
		        if (err) {
		          return reject(err);
		        } else {
		          // делаем resolve для всех results колбэка, если задано manyArgs
		          resolve(manyArgs ? results : results[0]);
		        }
		      }

		      args.push(callback);

		      f.call(this, ...args);
		    });
		  };
		};
-----------------------------------------------------------------------
-----------------------------------------------------------------------
Микрозадачи:
	Очередь определяется как первым-пришел-первым-ушел (FIFO): 
	задачи, попавшие в очередь первыми, выполняются тоже первыми
	Если важен порядок, то можно использовать такую конструкцию:
		Promise.resolve()
  			.then(() => alert("промис выполнен!"))
  			.then(() => alert("код выполнен"));
  	Если писать такой код, то будет выведена ошибка из reject:
  		let promise = Promise.reject(new Error("Ошибка в промисе!"));
		setTimeout(() => promise.catch(err => alert('поймана')), 1000);
		window.addEventListener('unhandledrejection', event => alert(event.reason));
-----------------------------------------------------------------------
-----------------------------------------------------------------------
async/await:
	async - всегда возвращает promise.
		async function f() {
  			return 1;
		}
	await - заставляет ждать интерпретатор js до тех пор, пока промис справа от await не выполниться.
	Пример оборачивания функции async:
		(async () => {
		  let response = await fetch('/article/promise-chaining/user.json');
		  let user = await response.json();
		  ...
		})();
	await работает с thenable объектом
	Если промис завершается с ошибкой, будет сгенерировано исключение, 
	как если бы на этом месте находилось throw.
		async function f() {								async function f() {
		  await Promise.reject(new Error("Упс!"));	===			throw new Error("Упс!");
		}													}
			



	